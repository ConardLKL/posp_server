私钥密码都是000000


机构签名私钥：
00010000.pfx
模（16进制）：
00B3B34BFACA0F8B392651B48008F6892756E895358FC1E381007E1826D5642E2F2E2FA99312B25EEDD4145AC8D70EB9954C9F13EA5EBF93F25869B11CA7356E9C3EE67D3D6729B528E8C95E431B56178DB81A156786AAF55C9BEC79810315A3A827B9D1924D9B17DB5F3E47552A7433005C69F37CCA94D668DA3C1C7AA98A41FD
私钥指数（16进制）：
30FE555CCEF265F6F2E79BDABC96DAD60AEFE69E6FCF6103AEEAB213046307E47D2729889BB45E0561A91B075EFAF8C627D9C7484304E085566D9A88415E64056878017A5608973B3FB37695B1EAB0C22E7899AE5EE330CBF144554540CA69765B2EE6431D987E955C7B93F255C0DDDE08E1C6C4790A1DBCD32542808AE8B801
模（整型）：
126189896896801435477206119719930389669834295751286781973237689946255158830411539913581911896348270751900669038157565600354288647272085990993738314973323405111802487105460677674086747184049499994660550618006049130612273524225285474618603612089854663350737750061822223660880971422556869707248934894927765717501
私钥指数（整型）：
34404398702291042450931823964412716520753150075285597758484688709579125959103916797776547625981520389931811867705256300214084098287343523308606073087619851397578548060474679515583764516010919465385195789381514326264793623538758980242472589762874279214768108864144880094558352663542677358721103775373762017281


磁道加密公钥：
1.cer
模（16进制）：
00BB554E9BD3B30D4311F0C4CD84D729A37BF1715CB261413730B0A1C79EAF3C281712F2AD68CF97CE326B89E74CC69587CA1006EB65794A288759B5AAB306CF4849790B8F765F6315032E9254D877556FB0CA36E55C09349AB911CCC1879ED95F114C098DFCCAD85547B76F927E9A9CA69855DFBD8742A6B082E9AD45DF246F4CE315585851131E0D948452BA23AE413B6912004D1716BF87AC416099D03CBA60407E1C9A2409BD707483A48144C302A076F7AD3A3DED6ED259B883A1F96602415881F49D0FC421FBC86AA354010B510301613E1A218785C5E3B106D5ABA6CBE1BEC91DBE22484C8242F70A702AC870E18CF87552D3CC05B20F3D96C2B545B267
公钥指数（16进制）：
010001
模（整型）：
23648629510357402173669374843546537318532861396089478651610490265597426690711092692490012429464861104676801339474220894685964389750254240882066338437712341498313076007251358899488346743554156067576120095739341094220657657611893755799646325194641430110114613586989866468748149428464174345443169749235358776080247588710246733575431530477273705811466095207773188767974550742707293785661521305267533098997705930724499157184797236612324838287379798375903922360666026664942383548006246201656190964746068225967889145661249463716565124050082767382345820178584568857820200627919768134084891356188058390460707236118612628845159
公钥指数（整型）：
65537


验签公钥：
verify_sign_acp.cer
模（16进制）：
00BB554E9BD3B30D4311F0C4CD84D729A37BF1715CB261413730B0A1C79EAF3C281712F2AD68CF97CE326B89E74CC69587CA1006EB65794A288759B5AAB306CF4849790B8F765F6315032E9254D877556FB0CA36E55C09349AB911CCC1879ED95F114C098DFCCAD85547B76F927E9A9CA69855DFBD8742A6B082E9AD45DF246F4CE315585851131E0D948452BA23AE413B6912004D1716BF87AC416099D03CBA60407E1C9A2409BD707483A48144C302A076F7AD3A3DED6ED259B883A1F96602415881F49D0FC421FBC86AA354010B510301613E1A218785C5E3B106D5ABA6CBE1BEC91DBE22484C8242F70A702AC870E18CF87552D3CC05B20F3D96C2B545B267
公钥指数（16进制）：
010001
模（整型）：
23648629510357402173669374843546537318532861396089478651610490265597426690711092692490012429464861104676801339474220894685964389750254240882066338437712341498313076007251358899488346743554156067576120095739341094220657657611893755799646325194641430110114613586989866468748149428464174345443169749235358776080247588710246733575431530477273705811466095207773188767974550742707293785661521305267533098997705930724499157184797236612324838287379798375903922360666026664942383548006246201656190964746068225967889145661249463716565124050082767382345820178584568857820200627919768134084891356188058390460707236118612628845159
公钥指数（整型）：
65537


商户签名私钥：
1_new.pfx
模（16进制）：
00BAA23E43A7D2783AEA9E5D7E11C1B63CC1BA49B6790CE02BD5CFAE9B3FDCB7CDB47F79F15AF1D7CE1FD9CC0B79A3D75AB0D8E5A1AF4D2AB6FC8B33DAE1F17A8A532A7B67628DD47F11FE378E01D1FE073AAAA252BD454DCB4A557033DA4FD3A91FFCB6282C82D9C4CCE85A50C1E014DD5828E10A11F80D5321B0063359225603
私钥指数（16进制）：
54892AB4D06E58012FC67DC89DD865684DC3C8A1BB60E6A5545A96D7416D03604C92B5346AA242C2DDD07448FA570933CE08E0B284C9EA402A520F31E4C7D15DD105920A4D52881E024D7911968A7F6249F305A24E8103929F7E69F4B3961B52E376CE54A76A81C5DAD52C223C788C08C6EDA022E660CBAA2D5CDE02D10DBA89
模（整型）：
131058685046526610501588873719789231138923787663888185713491576953988423038950679105996328873653379326076298816799324212506761372982055011197156877470110992001479097992556147535818302273274795031696999584023197087504413568947617341977342107451329352757341550717474830412922880290343898311322389119721632060931
私钥指数（整型）：
59363063088120335577454960043516537625447497395402914275981467901782906417920425244693852672755856467256281648178707283645318085310165296052422324911122634745349342559036334365646436699005585279282207587583666557010668931509212122531290977034155378202591826203546243022554008173136830202978904176253912070793


密码加密公钥：
cert_49.cer
模（16进制）：
00B530618A6A5176720C0BB4817E5DF1792251F1717426A7FD5C8B6BA0B3287DFC7235F4419212867FCEE82C36867D96BAB3FFAF72DDA292D1CD31C8D2F203269418FF4635DF94074456479001F4A264537C067F6AD78F9D117B556EFAE8B1A14799F4E61D672130C797309960F4AE9A90CFA557098F8CB7D3E1B70393AED55540B2E2E2E3C5ED1882B0457EA031723E3FBE51C074A63EDE7FA479443D3EB051B985D07068176811069619C2248AE75679D97515124F7AADEA251452EEFFDAB22FBEBBFEFDA2CDDE58B8DF62EE8497370D600D870B9C0BB0C3A57A0549CA2AAE0A506E87DCBCF75B25DB11ACBBD9FD76039A671D60E32C43B0276486D5554C2CDF
公钥指数（16进制）：
010001
模（整型）：
22872990768164101054416676375605682992831401598604208381551672246835780202069503105283728847306881175400484638059936381324261268652327074223329092050306202729587793717036591986796280432118037321286528869347493328704865895675134197039682332520230605599274557578910754017076673151471559850060076916667819622657614803560511210840600875947302539412782854872778497270716169059923447279583189852938018784343578974365111576319992094940749314442989446201911578090210855199453400671198718070374504180233854944142229856275237475112184953273014274981663285247489632329313090813834869182536665152045513241150991675866504133094623
公钥指数（整型）：
65537


代码
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.interfaces.RSAPublicKey;
import java.util.Enumeration;



import com.cup.nocard.simulator.merchant.util.StringUtil;


public class Test {
	 public static void main(String[] args) throws CertificateException, IOException
	    {
//	        final String KEYSTORE_FILE     = "D:\\upmp\\trunk\\upmp1.0\\gateway\\web\\WEB-INF\\config\\UP_INST_CERT.p12";
	        final String KEYSTORE_FILE     = "D:\\dev\\workspace\\AcpSDKTest\\src\\1_new.pfx";
		    final String KEYSTORE_PASSWORD = "000000";

	        try
	        {
	            KeyStore ks = KeyStore.getInstance("PKCS12");
	            FileInputStream fis = new FileInputStream(KEYSTORE_FILE);

	            // If the keystore password is empty(""), then we have to set
	            // to null, otherwise it won't work!!!
	            char[] nPassword = null;
	            if ((KEYSTORE_PASSWORD == null) || KEYSTORE_PASSWORD.trim().equals(""))
	            {
	                nPassword = null;
	            }
	            else
	            {
	                nPassword = KEYSTORE_PASSWORD.toCharArray();
	            }
	            ks.load(fis, nPassword);
	            fis.close();

	            System.out.println("keystore type=" + ks.getType());

	            // Now we loop all the aliases, we need the alias to get keys.
	            // It seems that this value is the "Friendly name" field in the
	            // detals tab <-- Certificate window <-- view <-- Certificate
	            // Button <-- Content tab <-- Internet Options <-- Tools menu
	            // In MS IE 6.
	            Enumeration enuma = ks.aliases();
	            String keyAlias = null;
	            if (enuma.hasMoreElements()) // we are readin just one certificate.
	            {
	                keyAlias = (String)enuma.nextElement();
	                System.out.println("alias=[" + keyAlias + "]");
	            }

	            // Now once we know the alias, we could get the keys.
	            System.out.println("is key entry=" + ks.isKeyEntry(keyAlias));
	            PrivateKey prikey = (PrivateKey) ks.getKey(keyAlias, nPassword);
	            Certificate cert = ks.getCertificate(keyAlias);
	            PublicKey pubkey = cert.getPublicKey();

	            System.out.println("cert class = " + cert.getClass().getName());
	            System.out.println("cert = " + cert);
	            System.out.println("public key = " + pubkey);
	            System.out.println("private key = " + prikey);
	            
	            
	        }
	        catch (Exception e)
	        {
	            e.printStackTrace();
	        }
		 
		 
	    	File file = new File("D:\\dev\\workspace\\AcpSDKTest\\src\\verify_sign_acp.cer");
	    	System.out.println(file);
	    	System.out.println(file.exists());
	    	FileInputStream fis = new FileInputStream(file);
	    	RSAPublicKey pubKey = (RSAPublicKey)getPublicKey(fis);
	    	System.out.println(StringUtil.byteArrayToHexString(pubKey.getModulus().toByteArray()));
	        System.out.println(StringUtil.byteArrayToHexString(pubKey.getPublicExponent().toByteArray()));
	        System.out.println(pubKey.getModulus());
	        System.out.println(pubKey.getPublicExponent());
	 

		 
	}
	 
	    /**
	     * 由证书获得公钥
	     * @param cerPath 证书路径
	     * @return        16进制封装的公钥               
	     * @throws CertificateException
	     * @throws IOException
	     */
	     
	    public static PublicKey getPublicKey(FileInputStream in) throws CertificateException, IOException{
	        //实例化证书工厂
	        CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
	        Certificate certificate = certificateFactory.generateCertificate(in);
	        in.close();
	        PublicKey publicKey = certificate.getPublicKey();
	        //封装成16进制
	        //return Hex.encodeHexString(publicKey.getEncoded());
	        return publicKey;
	    }

}



